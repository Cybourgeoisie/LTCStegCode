/** 
 * Standard Libraries
 **/
#include <stdlib.h>
#include <bitset>
#include <iomanip>
#include <cstring>
#include <iostream>
#include <deque>
#include <list>
#include <queue>
#include <map>
#include <string>
#include <sstream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <math.h>

using namespace std;

#define NUM_GRAPH_NODES 28
#define NUM_RING_NODES 256

struct state {
	signed char node_id;
	signed char level;
	signed char paddles[NUM_GRAPH_NODES]; // 28B
	vector<unsigned long long int> *v_ints;
};

struct ring {
	signed char nodes[NUM_RING_NODES]; // 256B
};

struct graph_node {
	bool value; // 1 B
	signed char edges[4]; // 8 B
};

graph_node * Graph[NUM_GRAPH_NODES];
queue<state> states_to_evaluate;
queue<state> next_states_to_evaluate;
map<string, state> reduction_map;

void setup(ring * ring_nodes)
{
	// Ring Nodes
	memcpy(ring_nodes->nodes, (unsigned char [NUM_RING_NODES]){4,2,14,10,17,8,2,11,19,0,25,2,25,21,7,20,25,0,21,16,14,24,21,18,14,16,15,6,20,10,14,7,19,4,3,9,27,4,24,1,5,27,7,24,1,21,14,25,27,5,19,22,18,10,14,23,9,14,13,3,19,4,3,9,1,22,25,25,1,11,26,2,26,18,4,17,25,20,11,21,0,22,3,17,18,7,10,2,16,8,1,14,1,4,24,19,26,4,6,0,22,22,1,22,0,15,18,27,21,25,11,12,21,9,5,14,22,7,2,17,5,27,25,19,1,0,3,2,1,24,27,19,2,16,20,16,14,27,14,21,22,11,4,7,13,10,13,13,11,1,0,2,1,1,25,26,22,25,0,16,19,25,0,21,17,24,14,21,8,8,13,2,18,9,3,17,25,22,25,2,1,2,25,22,25,26,19,26,0,20,14,16,14,22,18,16,13,8,6,13,2,7,14,9,4,22,1,1,5,24,4,0,24,25,27,22,27,16,4,20,21,14,25,19,12,8,14,8,4,8,0,11,0,20,0,25,1,26,8,22,2,24,14,22,2,1,19,25,0,18,10,19,14,7,13,27}, NUM_RING_NODES*sizeof(unsigned char));

	// Graph Nodes - on the heap
	Graph[0]  = new graph_node({1,{1,2,27,25}});
	Graph[1]  = new graph_node({0,{25,0,-1,-1}});
	Graph[2]  = new graph_node({1,{5,0,1,4}});
	Graph[3]  = new graph_node({0,{4,1,-1,-1}});
	Graph[4]  = new graph_node({1,{2,3,-1,-1}});
	Graph[5]  = new graph_node({1,{2,3,-1,-1}});
	Graph[6]  = new graph_node({1,{5,8,9,-1}});
	Graph[7]  = new graph_node({0,{4,8,5,-1}});
	Graph[8]  = new graph_node({1,{9,7,-1,-1}});
	Graph[9]  = new graph_node({0,{7,8,10,6}});
	Graph[10] = new graph_node({0,{9,11,13,-1}});
	Graph[11] = new graph_node({1,{9,8,12,13}});
	Graph[12] = new graph_node({0,{11,14,13,10}});
	Graph[13] = new graph_node({1,{10,11,14,-1}});
	Graph[14] = new graph_node({0,{13,12,17,-1}});
	Graph[15] = new graph_node({0,{14,12,17,16}});
	Graph[16] = new graph_node({0,{17,19,14,15}});
	Graph[17] = new graph_node({1,{18,16,14,-1}});
	Graph[18] = new graph_node({1,{16,22,19,-1}});
	Graph[19] = new graph_node({0,{18,20,16,-1}});
	Graph[20] = new graph_node({1,{23,21,19,-1}});
	Graph[21] = new graph_node({0,{20,22,26,-1}});
	Graph[22] = new graph_node({0,{19,18,21,-1}});
	Graph[23] = new graph_node({1,{22,-1,-1,-1}});
	Graph[24] = new graph_node({0,{21,23,25,26}});
	Graph[25] = new graph_node({1,{0,24,-1,-1}});
	Graph[26] = new graph_node({1,{21,27,-1,-1}});
	Graph[27] = new graph_node({0,{25,1,26,-1}});
}

void debugPrintState(state * s) {
	cout << "Step " << (int)s->level << ": ";
	for (int j = 0; j < NUM_GRAPH_NODES; j++) {
		if (j < NUM_GRAPH_NODES-1)
			cout << (int)s->paddles[j] << ",";
		else
			cout << (int)s->paddles[j];
	}
	cout << " - Node " << (int)s->node_id << endl;
}

void findPathsFromRingNode(int current_ring_node)
{
	char x[256][3][6] = {
		{{1,0,26,27,3,24},{0,1,26,27,24,3},{27,24,26,25,23,21}},
		{{14,15,17,16,19,18},{12,13,9,10,8,11},{13,12,9,10,8,11}},
		{{11,8,10,7,9,4},{9,10,8,12,11,13},{7,6,5,4,11,8}},
		{{17,16,15,14,21,23},{16,17,15,14,21,23},{14,15,17,16,19,18}},
		{{21,23,20,22,19,25},{22,20,23,21,19,25},{19,20,18,22,21,23}},
		{{14,15,17,16,19,18},{13,12,9,10,8,11},{8,10,9,11,7,6}},
		{{16,17,15,14,21,23},{17,16,15,14,21,23},{19,18,20,22,21,23}},
		{{27,26,24,25,1,0},{27,25,24,26,23,22},{0,1,26,27,3,24}},
		{{25,24,27,23,26,22},{24,27,26,25,23,21},{25,24,27,23,26,22}},
		{{19,18,20,22,21,23},{18,19,20,22,21,23},{19,18,20,22,21,23}},
		{{25,24,27,23,22,21},{0,1,26,27,24,3},{1,0,26,27,3,24}},
		{{3,2,1,0,27,25},{4,5,7,6,11,8},{2,3,1,0,27,25}},
		{{20,22,23,21,19,18},{23,21,20,22,25,24},{22,20,23,21,19,25}},
		{{18,19,20,22,21,23},{16,17,15,14,21,23},{14,15,17,16,19,18}},
		{{1,0,26,27,3,24},{25,24,27,23,22,26},{24,27,26,25,23,21}},
		{{2,3,1,0,27,25},{5,4,7,6,11,8},{2,3,1,0,27,25}},
		{{26,27,24,25,1,23},{21,23,20,22,25,19},{22,20,23,21,19,25}},
		{{8,10,11,9,7,6},{7,6,5,4,11,8},{8,10,11,9,7,6}},
		{{25,24,27,23,26,22},{24,27,26,25,23,21},{26,27,24,25,1,0}},
		{{25,24,27,23,22,21},{0,1,26,27,24,3},{1,0,26,27,3,24}},
		{{27,24,26,25,23,21},{1,0,26,27,3,24},{25,24,27,23,22,26}},
		{{3,2,1,0,27,25},{1,0,26,27,3,24},{0,1,26,27,24,3}},
		{{24,27,25,26,23,21},{21,23,20,22,19,25},{22,20,23,21,19,25}},
		{{4,5,7,6,11,8},{2,3,1,0,27,25},{0,1,26,27,24,3}},
		{{9,10,8,11,12,13},{10,8,11,9,7,12},{11,8,10,7,4,6}},
		{{2,3,1,0,27,25},{1,0,26,27,24,3},{0,1,26,27,24,3}},
		{{13,12,9,10,8,11},{11,8,10,7,4,6},{8,10,11,9,7,6}},
		{{9,10,8,11,12,13},{7,6,5,4,11,8},{4,5,7,6,11,8}},
		{{8,10,11,9,7,6},{7,6,5,4,11,8},{8,10,11,9,7,6}},
		{{11,8,10,7,4,6},{13,12,9,10,8,11},{14,15,17,16,19,18}},
		{{10,8,11,9,7,12},{11,8,10,7,4,6},{8,10,11,9,7,6}},
		{{13,12,9,10,8,11},{11,8,10,7,4,6},{12,13,10,9,8,11}},
		{{21,23,20,22,19,25},{22,20,23,21,19,25},{19,20,18,22,21,23}},
		{{3,2,1,0,27,25},{1,0,26,27,3,24},{25,24,27,23,22,26}},
		{{14,15,17,16,19,18},{12,13,9,10,8,11},{14,15,17,16,19,18}},
		{{23,21,20,22,25,24},{22,20,23,21,19,25},{21,23,20,22,19,25}},
		{{18,19,20,22,21,23},{19,18,20,22,21,23},{20,22,23,21,19,18}},
		{{4,5,7,6,11,8},{3,2,1,0,27,25},{4,5,7,6,11,8}},
		{{16,17,15,14,21,23},{17,16,15,14,21,23},{16,17,15,14,21,23}},
		{{2,3,1,0,27,25},{0,1,26,27,24,3},{27,24,26,25,23,21}},
		{{26,27,24,25,1,23},{21,23,20,22,25,19},{22,20,23,21,19,25}},
		{{21,23,20,22,19,25},{26,27,24,25,1,23},{27,24,25,26,23,21}},
		{{1,0,26,27,3,24},{0,1,26,27,24,3},{25,24,27,23,22,21}},
		{{1,0,26,27,3,24},{25,24,27,23,22,26},{24,27,26,25,23,21}},
		{{2,3,1,0,27,25},{1,0,26,27,24,3},{0,1,26,27,24,3}},
		{{0,1,26,27,24,3},{2,3,1,0,27,25},{4,5,7,6,11,8}},
		{{1,0,26,27,3,24},{25,24,27,23,22,26},{24,27,26,25,23,21}},
		{{4,5,7,6,11,8},{2,3,1,0,27,25},{5,4,7,6,11,8}},
		{{25,24,27,23,22,21},{0,1,26,27,24,3},{1,0,26,27,3,24}},
		{{0,1,26,27,24,3},{2,3,1,0,27,25},{1,0,26,27,24,3}},
		{{24,27,25,26,23,21},{23,21,20,22,25,19},{22,20,23,21,19,25}},
		{{4,5,7,6,11,8},{3,2,1,0,27,25},{4,5,7,6,11,8}},
		{{9,10,8,12,13,11},{6,7,5,4,11,8},{9,10,8,12,11,13}},
		{{14,15,17,16,19,18},{17,16,15,14,21,23},{14,15,17,16,19,18}},
		{{10,8,9,11,12,7},{9,10,8,12,13,11},{7,6,5,4,11,8}},
		{{7,6,5,4,11,8},{4,5,7,6,11,8},{2,3,1,0,27,25}},
		{{9,10,8,11,12,13},{10,8,11,9,7,12},{13,12,9,10,8,11}},
		{{10,8,9,11,12,7},{9,10,8,12,13,11},{6,7,5,4,11,8}},
		{{9,10,8,11,12,13},{7,6,5,4,11,8},{8,10,11,9,7,6}},
		{{12,13,9,10,8,11},{11,8,10,7,9,4},{13,12,9,10,8,11}},
		{{19,18,20,22,21,23},{18,19,20,22,21,23},{16,17,15,14,21,23}},
		{{18,19,20,22,21,23},{22,20,23,21,25,19},{18,19,20,22,21,23}},
		{{20,22,23,21,19,18},{23,21,20,22,25,24},{22,20,23,21,19,25}},
		{{14,15,17,16,19,18},{13,12,9,10,8,11},{14,15,17,16,19,18}},
		{{16,17,15,14,21,23},{15,14,17,16,19,18},{16,17,15,14,21,23}},
		{{16,17,15,14,21,23},{17,16,15,14,21,23},{14,15,17,16,19,18}},
		{{20,22,23,21,19,18},{19,18,20,22,21,23},{20,22,23,21,19,18}},
		{{3,2,1,0,27,25},{1,0,26,27,3,24},{0,1,26,27,24,3}},
		{{22,20,23,19,21,25},{23,21,20,22,19,25},{26,27,24,25,1,23}},
		{{19,18,20,22,21,23},{16,17,15,14,21,23},{19,18,20,22,21,23}},
		{{0,1,26,27,24,3},{27,24,26,25,23,21},{26,27,24,25,23,1}},
		{{26,27,24,25,1,23},{27,24,25,26,23,21},{25,23,22,20,24,21}},
		{{20,22,23,21,19,18},{23,21,20,22,25,24},{22,20,23,21,19,25}},
		{{25,24,27,23,22,21},{0,1,26,27,24,3},{25,24,27,23,22,21}},
		{{7,6,5,4,11,8},{5,4,7,6,11,8},{2,3,1,0,27,25}},
		{{4,5,7,6,11,8},{3,2,1,0,27,25},{1,0,26,27,3,24}},
		{{1,0,26,27,3,24},{0,1,26,27,24,3},{2,3,1,0,27,25}},
		{{26,27,24,25,1,23},{27,24,25,26,23,21},{25,24,23,27,22,20}},
		{{24,27,25,26,23,21},{21,23,20,22,19,25},{22,20,23,21,19,25}},
		{{1,0,26,27,3,24},{0,1,26,27,24,3},{25,24,27,23,22,21}},
		{{12,13,9,10,8,11},{14,15,17,16,19,18},{17,16,15,14,21,23}},
		{{2,3,1,0,27,25},{4,5,7,6,11,8},{3,2,1,0,27,25}},
		{{10,8,11,9,7,12},{11,8,10,7,4,6},{9,10,8,12,11,13}},
		{{18,19,20,22,21,23},{19,18,20,22,21,23},{18,19,20,22,21,23}},
		{{3,2,1,0,27,25},{4,5,7,6,11,8},{2,3,1,0,27,25}},
		{{13,12,9,10,8,11},{8,10,9,11,7,6},{13,12,9,10,8,11}},
		{{9,10,8,12,13,11},{6,7,5,4,11,8},{9,8,10,11,7,12}},
		{{8,10,11,9,7,6},{7,6,5,4,11,8},{8,10,11,9,7,6}},
		{{21,23,20,22,19,25},{26,27,24,25,1,23},{21,23,20,22,25,19}},
		{{18,19,20,22,21,23},{16,17,15,14,21,23},{14,15,17,16,19,18}},
		{{1,0,26,27,3,24},{25,24,27,23,22,26},{24,27,26,25,23,21}},
		{{15,14,17,16,19,18},{16,17,15,14,21,23},{17,16,15,14,21,23}},
		{{19,18,20,22,21,23},{20,22,23,21,19,18},{21,23,20,22,19,25}},
		{{5,4,6,7,11,8},{2,3,1,0,27,25},{0,1,26,27,24,3}},
		{{27,24,26,25,23,21},{1,0,26,27,3,24},{25,24,27,23,22,26}},
		{{19,18,20,22,21,23},{16,17,15,14,21,23},{19,18,20,22,21,23}},
		{{19,18,20,22,21,23},{18,19,20,22,21,23},{16,17,15,14,21,23}},
		{{27,24,25,26,23,21},{25,24,23,27,22,20},{0,1,26,27,24,3}},
		{{1,0,26,27,3,24},{0,1,26,27,24,3},{25,24,27,23,22,21}},
		{{24,27,25,26,23,21},{23,21,20,22,25,19},{22,20,23,21,19,25}},
		{{22,20,23,19,21,25},{23,21,20,22,19,25},{26,27,24,25,1,23}},
		{{0,1,26,27,24,3},{1,0,26,27,3,24},{25,24,27,23,22,26}},
		{{5,4,6,7,11,8},{2,3,1,0,27,25},{1,0,26,27,24,3}},
		{{4,5,7,6,11,8},{3,2,1,0,27,25},{1,0,26,27,3,24}},
		{{2,3,1,0,27,25},{5,4,7,6,11,8},{2,3,1,0,27,25}},
		{{3,2,1,0,27,25},{1,0,26,27,3,24},{0,1,26,27,24,3}},
		{{0,1,26,27,24,3},{2,3,1,0,27,25},{1,0,26,27,24,3}},
		{{14,15,17,16,19,18},{12,13,9,10,8,11},{11,8,10,7,9,4}},
		{{17,16,15,14,21,23},{14,15,17,16,19,18},{13,12,9,10,8,11}},
		{{14,15,17,16,19,18},{12,13,9,10,8,11},{13,12,9,10,8,11}},
		{{11,8,10,7,4,6},{13,12,9,10,8,11},{8,10,9,11,7,6}},
		{{9,10,8,11,12,13},{10,8,11,9,7,12},{13,12,9,10,8,11}},
		{{6,7,5,4,11,8},{9,10,8,12,11,13},{7,6,5,4,11,8}},
		{{8,10,11,9,7,6},{7,6,5,4,11,8},{4,5,7,6,11,8}},
		{{9,10,8,11,12,13},{10,8,11,9,7,12},{11,8,10,7,4,6}},
		{{20,22,23,21,19,18},{23,21,20,22,25,24},{22,20,23,21,19,25}},
		{{18,19,20,22,21,23},{22,20,23,21,25,19},{23,21,20,22,19,25}},
		{{11,7,8,10,4,6},{12,13,10,9,8,11},{14,15,17,16,19,18}},
		{{27,24,25,26,23,21},{26,27,24,25,23,1},{27,24,25,26,23,21}},
		{{19,18,20,22,21,23},{16,17,15,14,21,23},{14,15,17,16,19,18}},
		{{15,14,17,16,19,21},{17,16,15,14,21,23},{16,17,15,14,21,23}},
		{{22,20,23,21,25,19},{19,20,18,22,21,23},{20,22,23,21,19,18}},
		{{20,22,23,21,19,18},{19,18,20,22,21,23},{16,17,15,14,21,23}},
		{{3,2,1,0,27,25},{4,5,7,6,11,8},{2,3,1,0,27,25}},
		{{22,20,23,21,19,25},{18,19,20,22,21,23},{19,18,20,22,21,23}},
		{{21,23,20,22,19,25},{26,27,24,25,1,23},{27,24,25,26,23,21}},
		{{1,0,26,27,3,24},{25,24,27,23,22,26},{24,27,26,25,23,21}},
		{{25,24,27,23,22,21},{0,1,26,27,24,3},{1,0,26,27,3,24}},
		{{7,6,5,4,11,8},{5,4,7,6,11,8},{2,3,1,0,27,25}},
		{{7,6,5,4,11,8},{4,5,7,6,11,8},{3,2,1,0,27,25}},
		{{5,4,6,7,11,8},{2,3,1,0,27,25},{0,1,26,27,24,3}},
		{{4,5,7,6,11,8},{3,2,1,0,27,25},{1,0,26,27,3,24}},
		{{23,21,20,22,25,24},{22,20,23,21,19,25},{19,20,18,22,21,23}},
		{{2,3,1,0,27,25},{1,0,26,27,24,3},{25,24,27,23,22,26}},
		{{1,0,26,27,3,24},{0,1,26,27,24,3},{27,24,26,25,23,21}},
		{{4,5,7,6,11,8},{2,3,1,0,27,25},{5,4,7,6,11,8}},
		{{17,16,15,14,21,23},{14,15,17,16,19,18},{17,16,15,14,21,23}},
		{{3,2,1,0,27,25},{4,5,7,6,11,8},{2,3,1,0,27,25}},
		{{8,10,11,9,7,6},{9,10,8,12,11,13},{7,6,5,4,11,8}},
		{{19,18,20,22,21,23},{18,19,20,22,21,23},{22,20,23,21,25,19}},
		{{11,8,10,7,4,6},{13,12,9,10,8,11},{14,15,17,16,19,18}},
		{{8,10,11,9,7,6},{7,6,5,4,11,8},{5,4,7,6,11,8}},
		{{9,10,8,11,12,13},{10,8,11,9,7,12},{9,10,8,12,13,11}},
		{{19,18,20,22,21,23},{20,22,23,21,19,18},{21,23,20,22,19,25}},
		{{10,8,11,9,7,12},{11,8,10,7,4,6},{12,13,10,9,8,11}},
		{{12,13,9,10,8,11},{13,12,9,10,8,11},{11,8,10,7,4,6}},
		{{25,24,27,23,22,21},{0,1,26,27,24,3},{25,24,27,23,22,21}},
		{{21,23,20,22,19,25},{26,27,24,25,1,23},{21,23,20,22,25,19}},
		{{24,27,26,25,23,21},{26,27,24,25,1,0},{27,24,25,26,23,21}},
		{{14,15,17,16,19,18},{17,16,15,14,21,23},{19,18,20,22,21,23}},
		{{18,19,20,22,21,23},{16,17,15,14,21,23},{15,14,17,16,19,18}},
		{{1,0,26,27,3,24},{25,24,27,23,22,26},{0,1,26,27,24,3}},
		{{20,22,23,21,19,18},{23,21,20,22,25,24},{22,20,23,21,19,25}},
		{{0,1,26,27,24,3},{2,3,1,0,27,25},{1,0,26,27,24,3}},
		{{20,22,23,21,19,18},{21,23,20,22,19,25},{22,20,23,21,19,25}},
		{{24,27,25,26,23,21},{23,21,20,22,25,19},{22,20,23,21,19,25}},
		{{3,2,1,0,27,25},{1,0,26,27,3,24},{0,1,26,27,24,3}},
		{{8,10,11,9,7,6},{9,10,8,12,11,13},{6,7,5,4,11,8}},
		{{5,4,7,6,11,8},{3,2,1,0,27,25},{4,5,7,6,11,8}},
		{{0,1,26,27,24,3},{27,24,26,25,23,21},{26,27,24,25,23,1}},
		{{23,21,20,22,25,24},{22,20,23,21,19,25},{19,18,20,22,21,23}},
		{{0,1,26,27,24,3},{25,24,27,23,22,21},{24,27,26,25,23,21}},
		{{4,5,7,6,11,8},{3,2,1,0,27,25},{4,5,7,6,11,8}},
		{{5,4,7,6,11,8},{3,2,1,0,27,25},{1,0,26,27,3,24}},
		{{10,8,9,11,12,7},{13,12,9,10,8,11},{14,15,17,16,19,18}},
		{{2,3,1,0,27,25},{0,1,26,27,24,3},{1,0,26,27,3,24}},
		{{8,10,11,9,7,6},{9,10,8,12,11,13},{8,10,11,9,7,6}},
		{{18,19,20,22,21,23},{19,18,20,22,21,23},{16,17,15,14,21,23}},
		{{7,6,5,4,11,8},{5,4,7,6,11,8},{2,3,1,0,27,25}},
		{{10,8,9,11,12,7},{9,10,8,12,13,11},{10,8,11,9,7,12}},
		{{6,7,5,4,11,8},{9,10,8,12,11,13},{7,6,5,4,11,8}},
		{{22,20,23,21,25,19},{19,20,18,22,21,23},{18,19,20,22,21,23}},
		{{18,19,20,22,21,23},{16,17,15,14,21,23},{17,16,15,14,21,23}},
		{{3,2,1,0,27,25},{4,5,7,6,11,8},{3,2,1,0,27,25}},
		{{20,22,23,21,19,18},{23,21,20,22,25,24},{22,20,23,21,19,25}},
		{{27,24,25,26,23,21},{25,24,23,27,22,20},{0,1,26,27,24,3}},
		{{23,21,20,22,25,24},{22,20,23,21,19,25},{21,23,20,22,19,25}},
		{{14,15,17,16,19,18},{13,12,9,10,8,11},{11,8,10,7,4,6}},
		{{18,19,20,22,21,23},{19,18,20,22,21,23},{20,22,23,21,19,18}},
		{{25,24,27,23,26,22},{24,27,26,25,23,21},{25,24,27,23,26,22}},
		{{16,17,15,14,21,23},{15,14,17,16,19,18},{17,16,15,14,21,23}},
		{{0,1,26,27,24,3},{2,3,1,0,27,25},{4,5,7,6,11,8}},
		{{21,23,20,22,19,25},{22,20,23,21,19,25},{18,19,20,22,21,23}},
		{{0,1,26,27,24,3},{27,24,26,25,23,21},{26,27,24,25,23,1}},
		{{2,3,1,0,27,25},{5,4,7,6,11,8},{2,3,1,0,27,25}},
		{{24,27,25,26,23,21},{21,23,20,22,19,25},{26,27,24,25,1,23}},
		{{9,10,8,11,12,13},{10,8,11,9,7,12},{11,8,10,7,4,6}},
		{{25,24,27,23,22,21},{0,1,26,27,24,3},{1,0,26,27,3,24}},
		{{2,3,1,0,27,25},{1,0,26,27,24,3},{25,24,27,23,22,26}},
		{{1,0,26,27,3,24},{0,1,26,27,24,3},{25,24,27,23,22,21}},
		{{24,27,25,26,23,21},{23,21,20,22,25,19},{22,20,23,21,19,25}},
		{{1,0,26,27,3,24},{0,1,26,27,24,3},{1,0,26,27,3,24}},
		{{7,6,5,4,11,8},{8,10,11,9,7,6},{9,10,8,12,11,13}},
		{{2,3,1,0,27,25},{4,5,7,6,11,8},{3,2,1,0,27,25}},
		{{8,10,11,9,7,6},{7,6,5,4,11,8},{4,5,7,6,11,8}},
		{{17,16,15,14,21,23},{16,17,15,14,21,23},{19,18,20,22,21,23}},
		{{7,6,5,4,11,8},{4,5,7,6,11,8},{3,2,1,0,27,25}},
		{{14,15,17,16,19,18},{12,13,9,10,8,11},{13,12,9,10,8,11}},
		{{14,15,17,16,19,18},{17,16,15,14,21,23},{14,15,17,16,19,18}},
		{{13,12,9,10,8,11},{11,8,10,7,4,6},{9,10,8,12,11,13}},
		{{23,21,20,22,25,24},{22,20,23,21,19,25},{23,21,20,22,25,24}},
		{{14,15,17,16,19,18},{13,12,9,10,8,11},{14,15,17,16,19,18}},
		{{14,15,17,16,19,18},{12,13,9,10,8,11},{10,8,9,11,12,13}},
		{{22,20,23,21,25,19},{19,20,18,22,21,23},{18,19,20,22,21,23}},
		{{20,22,23,21,19,18},{21,23,20,22,19,25},{22,20,23,21,19,25}},
		{{17,16,15,14,21,23},{16,17,15,14,21,23},{19,18,20,22,21,23}},
		{{0,1,26,27,24,3},{2,3,1,0,27,25},{5,4,7,6,11,8}},
		{{27,24,25,26,23,21},{26,27,24,25,23,1},{27,24,25,26,23,21}},
		{{26,27,24,25,1,23},{27,24,25,26,23,21},{25,24,23,27,22,20}},
		{{18,19,20,22,21,23},{16,17,15,14,21,23},{14,15,17,16,19,18}},
		{{24,27,26,25,23,21},{26,27,24,25,1,0},{21,23,20,22,25,19}},
		{{25,24,27,23,22,21},{0,1,26,27,24,3},{1,0,26,27,3,24}},
		{{1,0,26,27,3,24},{25,24,23,27,22,20},{24,25,27,26,23,21}},
		{{7,6,5,4,11,8},{8,10,11,9,7,6},{7,6,5,4,11,8}},
		{{1,0,26,27,3,24},{0,1,26,27,24,3},{27,24,26,25,23,21}},
		{{4,5,7,6,11,8},{2,3,1,0,27,25},{5,4,7,6,11,8}},
		{{25,24,27,23,22,21},{0,1,26,27,24,3},{1,0,26,27,3,24}},
		{{1,0,26,27,3,24},{25,24,27,23,22,26},{24,27,26,25,23,21}},
		{{4,5,7,6,11,8},{2,3,1,0,27,25},{4,5,7,6,11,8}},
		{{1,0,26,27,3,24},{0,1,26,27,24,3},{27,24,26,25,23,21}},
		{{11,8,10,7,4,6},{8,10,11,9,7,6},{9,10,8,12,11,13}},
		{{2,3,1,0,27,25},{5,4,7,6,11,8},{3,2,1,0,27,25}},
		{{4,5,7,6,11,8},{3,2,1,0,27,25},{4,5,7,6,11,8}},
		{{23,21,20,22,25,24},{22,20,23,21,19,25},{19,18,20,22,21,23}},
		{{9,10,8,12,11,13},{8,10,11,9,7,6},{7,6,5,4,11,8}},
		{{14,15,17,16,19,18},{17,16,15,14,21,23},{14,15,17,16,19,18}},
		{{10,8,9,11,12,7},{9,10,8,12,13,11},{10,8,11,9,7,12}},
		{{18,19,20,22,21,23},{19,18,20,22,21,23},{20,22,23,21,19,18}},
		{{11,8,10,7,9,4},{9,10,8,12,11,13},{6,7,5,4,11,8}},
		{{18,19,20,22,21,23},{16,17,15,14,21,23},{15,14,17,16,19,18}},
		{{16,17,15,14,21,23},{19,18,20,22,21,23},{16,17,15,14,21,23}},
		{{12,13,9,10,8,11},{13,12,9,10,8,11},{14,15,17,16,19,18}},
		{{18,19,20,22,21,23},{19,18,20,22,21,23},{18,19,20,22,21,23}},
		{{23,21,20,22,25,24},{22,20,23,21,19,25},{23,21,20,22,19,25}},
		{{0,1,26,27,24,3},{25,24,27,23,22,21},{24,27,26,25,23,21}},
		{{19,18,20,22,21,23},{16,17,15,14,21,23},{14,15,17,16,19,18}},
		{{16,17,15,14,21,23},{15,14,17,16,19,18},{16,17,15,14,21,23}},
		{{21,23,20,22,19,25},{26,27,24,25,1,23},{21,23,20,22,25,19}},
		{{0,1,26,27,24,3},{1,0,26,27,3,24},{0,1,26,27,24,3}},
		{{2,3,1,0,27,25},{1,0,26,27,24,3},{25,24,27,23,22,26}},
		{{26,27,24,25,1,23},{21,23,20,22,25,19},{22,20,23,21,19,25}},
		{{7,6,5,4,11,8},{8,10,11,9,7,6},{7,6,5,4,11,8}},
		{{25,24,27,23,26,22},{24,27,26,25,23,21},{21,23,20,22,19,25}},
		{{1,0,26,27,3,24},{0,1,26,27,24,3},{25,24,27,23,22,21}},
		{{2,3,1,0,27,25},{5,4,7,6,11,8},{2,3,1,0,27,25}},
		{{3,2,1,0,27,25},{1,0,26,27,3,24},{25,24,27,23,22,26}},
		{{1,0,26,27,3,24},{25,24,27,23,22,26},{0,1,26,27,24,3}},
		{{18,19,20,22,21,23},{22,20,23,21,25,19},{19,20,18,22,21,23}},
		{{13,12,9,10,8,11},{8,10,9,11,7,6},{11,8,10,7,4,6}},
		{{3,2,1,0,27,25},{4,5,7,6,11,8},{2,3,1,0,27,25}},
		{{13,12,9,10,8,11},{11,8,10,7,4,6},{8,10,11,9,7,6}},
		{{18,19,20,22,21,23},{16,17,15,14,21,23},{17,16,15,14,21,23}},
		{{8,10,11,9,7,6},{9,10,8,12,11,13},{10,8,11,9,7,12}},
		{{11,8,10,7,4,6},{13,12,9,10,8,11},{14,15,17,16,19,18}},
		{{7,6,5,4,11,8},{4,5,7,6,11,8},{2,3,1,0,27,25}},
		{{9,10,8,11,12,13},{7,6,5,4,11,8},{4,5,7,6,11,8}},
	};

	// Start at the first one
	state s;

	while (!states_to_evaluate.empty())
	{
		// Get the next state
		s = states_to_evaluate.front();

		if (s.level == 3 && (s.node_id != x[255-current_ring_node][0][0] &&
			s.node_id != x[255-current_ring_node][0][1]))
		{
			states_to_evaluate.pop();
			continue;
		} else if (s.level == 2 && (s.node_id != x[255-current_ring_node][1][0] &&
			s.node_id != x[255-current_ring_node][1][1]))
		{
			states_to_evaluate.pop();
			continue;
		} else if (s.level == 1 && (s.node_id != x[255-current_ring_node][2][0] &&
			s.node_id != x[255-current_ring_node][2][1]))
		{
			states_to_evaluate.pop();
			continue;
		}


		// Change the paddle state for this node -> "Flip the paddle"
		// If we're the first level, don't flip (last node visited in encryption)
		if ((int)s.level > 1) {
			// Find where this paddle is in the CW rotation
			// WE'RE SUPPOSED TO GO ACW TO REVERSE MOVING FORWARD IN CW
			// IT DOESN'T FIND ANYTHING GOING CW INSTEAD. THIS IS HUGE.
			// SO FAR, I'VE BEEN ABLE TO FIND STUFF GOING ACW.
			// TYPE LOUD SO I DON'T FORGET THIS SHIT EVER AGAIN.
			int last_non_neg_index = 0;
			for (int i = 3; i >= 0; i--) {
				if (last_non_neg_index == 0 && Graph[s.node_id]->edges[i] >= 0) {
					last_non_neg_index = i;
				}

				if (Graph[s.node_id]->edges[i] == s.paddles[s.node_id]) {
					// Now we know the index -> move clockwise
					if (i == 0) {
						// Find the last non-negative one
						s.paddles[s.node_id] = Graph[s.node_id]->edges[last_non_neg_index];
					} else {
						s.paddles[s.node_id] = Graph[s.node_id]->edges[i-1];
					}

					// Found it. Now we need to LEAVE.
					// Or else we're gonna go back to where we started.
					break;
				}
			}
		}

		// Make more nodes
		if ((int)s.level < 5) {
			// Find the nodes pointing into it
			for (int i = 0; i < NUM_GRAPH_NODES; i++) {
				// Has an edge pointing in -> follow it
				if (s.paddles[i] == s.node_id) {
					// Make a copy of this state
					state * s_child = new state();
					memcpy(s_child, &s, sizeof(state));

					vector<unsigned long long int> * vi1 = new vector<unsigned long long int>();
					for (auto &bitwise : *(s.v_ints)) {
						unsigned long long int li;
						memcpy(&li, &bitwise, sizeof(unsigned long long int));
						vi1->push_back(li);
					}

					// Debug printing
					//debugPrintState(s_child);

					// Alter the node ID, set copy of bits, & update the level
					s_child->node_id = i;
					s_child->v_ints = vi1;
					s_child->level++;

					// Add to the queue
					states_to_evaluate.push(*s_child);
				}
			}
		}
		// Evaluate the final nodes
		else
		{
			//debugPrintState(&s);

			// Update the paddles ... Done already.
			// Update the binaries
			int array_index = current_ring_node/64;
			int bit_index   = current_ring_node%64;
			//cout << "a: " << array_index << " - b: " << bit_index << " - v: " << Graph[s.node_id]->value << endl;

			if (Graph[s.node_id]->value == 1) {
				for (auto &bitwise : *(s.v_ints)) {
					bitwise |= ((unsigned long long int)Graph[s.node_id]->value << (bit_index));
					//cout << "bits are now " << std::bitset<64>(bitwise) << endl;
				}
			}

			// Reset the level
			s.level = 1;

			// Add to the following states to evaluate
			next_states_to_evaluate.push(s);
		}

		// Get the next value
		states_to_evaluate.pop();
	}
}

// Set up all the ring nodes, graph nodes and the initial state
int main()
{
	// Keep ring nodes here..
	ring ring_nodes;
	setup(&ring_nodes);

	// We keep the contenders for each set of 64 bits here
	vector<unsigned long long int> *v_ints_0 = new vector<unsigned long long int>();
	vector<unsigned long long int> *v_ints_1 = new vector<unsigned long long int>();
	vector<unsigned long long int> *v_ints_2 = new vector<unsigned long long int>();
	vector<unsigned long long int> *v_ints_3 = new vector<unsigned long long int>();

	// Make first state. Add to queue.
	state * s1 = new state({4,1,{1,25,5,4,2,2,5,4,9,7,9,9,11,10,13,14,17,18,16,18,23,20,19,22,21,0,21,25},new vector<unsigned long long int>});

	// Initialize the ints
	(*s1->v_ints).push_back(0);

	// Add this state as the starting state
	states_to_evaluate.push(*s1);

	int total = NUM_RING_NODES;
	for (short int current_ring_node = 0; current_ring_node < total; current_ring_node++)
	{
		cout << "Ring node #" << current_ring_node << ": " << (int)ring_nodes.nodes[current_ring_node] << endl;

		findPathsFromRingNode(current_ring_node);

		cout << "Final count, iter = " << current_ring_node << ": " << next_states_to_evaluate.size() << endl;

		map<string, state>::iterator it;
		while (!next_states_to_evaluate.empty())
		{
			// Get the state
			state s = next_states_to_evaluate.front();

			// Determine if the state is already given
			// Get string version of paddles
			ostringstream oss;
			for (int i = 0; i < NUM_GRAPH_NODES; i++) {
				oss << setw(2) << setfill('0') << (int)s.paddles[i];
			}
			string paddles_as_index = oss.str();

			it = reduction_map.find(paddles_as_index);
			if (it == reduction_map.end()) {
				// Update the node ID and add it back
				s.node_id = ring_nodes.nodes[current_ring_node+1];
				states_to_evaluate.push(s);

				// Add to the map
				reduction_map.insert(it, pair<string, state>(paddles_as_index, s));
			} else {
				// Append the ints we have already
				for (auto &bitwise : *(s.v_ints)) {
					(*(it->second).v_ints).push_back(bitwise);
				}
			}

			// Time to refresh the ints and keep track of the states
			if (current_ring_node == 63) {
				for (auto &bitwise : *(s.v_ints)) {
					(*v_ints_0).push_back(bitwise);
				}

				(*(s.v_ints)).clear();
				(*(s.v_ints)).shrink_to_fit();
				(*(s.v_ints)).push_back(0);
			} else if (current_ring_node == 127) {
				for (auto &bitwise : *(s.v_ints)) {
					(*v_ints_1).push_back(bitwise);
				}

				(*(s.v_ints)).clear();
				(*(s.v_ints)).shrink_to_fit();
				(*(s.v_ints)).push_back(0);
			} else if (current_ring_node == 191) {
				for (auto &bitwise : *(s.v_ints)) {
					(*v_ints_2).push_back(bitwise);
				}

				(*(s.v_ints)).clear();
				(*(s.v_ints)).shrink_to_fit();
				(*(s.v_ints)).push_back(0);
			// Only include the ints from the last set
			} else if (current_ring_node == 255 && 
				paddles_as_index.compare("02250001030205040706090811101312191822201920182223242126") == 0) {
				cout << "shit's here" << endl;

				for (auto &bitwise : *(s.v_ints)) {
					(*v_ints_3).push_back(bitwise);
				}

				(*(s.v_ints)).clear();
				(*(s.v_ints)).shrink_to_fit();
				(*(s.v_ints)).push_back(0);
			}

			// Next!
			next_states_to_evaluate.pop();
		}

		cout << "Reduced to " << states_to_evaluate.size() << endl << endl;

		if (current_ring_node == 255)
		{
			sort((*v_ints_0).begin(), (*v_ints_0).end());
			(*v_ints_0).erase(unique((*v_ints_0).begin(), (*v_ints_0).end()), (*v_ints_0).end());
			sort((*v_ints_1).begin(), (*v_ints_1).end());
			(*v_ints_1).erase(unique((*v_ints_1).begin(), (*v_ints_1).end()), (*v_ints_1).end());
			sort((*v_ints_2).begin(), (*v_ints_2).end());
			(*v_ints_2).erase(unique((*v_ints_2).begin(), (*v_ints_2).end()), (*v_ints_2).end());
			sort((*v_ints_3).begin(), (*v_ints_3).end());
			(*v_ints_3).erase(unique((*v_ints_3).begin(), (*v_ints_3).end()), (*v_ints_3).end());

			ofstream outfile;

			outfile.open("reverse_bitwise0.bin", ofstream::binary | fstream::trunc);
			for (auto &bitwise : (*v_ints_0)) {
				ostringstream oss;
				oss << std::bitset<64>(bitwise);
				string oss_str = oss.str();
				outfile.write(oss_str.c_str(), oss_str.size());
				outfile.write("\n", sizeof(char));
			}
			outfile.close();

			outfile.open("reverse_bitwise1.bin", ofstream::binary | fstream::trunc);
			for (auto &bitwise : (*v_ints_1)) {
				ostringstream oss;
				oss << std::bitset<64>(bitwise);
				string oss_str = oss.str();
				outfile.write(oss_str.c_str(), oss_str.size());
				outfile.write("\n", sizeof(char));
			}
			outfile.close();

			outfile.open("reverse_bitwise2.bin", ofstream::binary | fstream::trunc);
			for (auto &bitwise : (*v_ints_2)) {
				ostringstream oss;
				oss << std::bitset<64>(bitwise);
				string oss_str = oss.str();
				outfile.write(oss_str.c_str(), oss_str.size());
				outfile.write("\n", sizeof(char));
			}
			outfile.close();

			outfile.open("reverse_bitwise3.bin", ofstream::binary | fstream::trunc);
			for (auto &bitwise : (*v_ints_3)) {
				ostringstream oss;
				oss << std::bitset<64>(bitwise);
				string oss_str = oss.str();
				outfile.write(oss_str.c_str(), oss_str.size());
				outfile.write("\n", sizeof(char));
			}
			outfile.close();
		}

		// Restart the reduction map
		reduction_map.clear();
	}

	return 0;
}